generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "nativeDistinct", "relationJoins", "postgresqlExtensions"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

// Account, Session, User and VerificationToken
// Match next-auth model https://next-auth.js.org/adapters/prisma
// Underscored names are from there too
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  User    @map("user")
  Support @map("support")
  Admin   @map("admin")

  @@map("user_role")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  slug      String   @unique
  legacyId  Int?     @unique @map("legacy_id")
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  name      String?
  role      UserRole @default(User)

  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  emailIsPublic Boolean   @default(false) @map("email_is_public")
  website       String?
  facebook      String?
  twitter       String?
  linkedin      String?

  image               Image?    @relation(fields: [imageId], references: [id])
  imageId             String?   @unique @map("image_id") @db.Uuid
  location            String?
  title               String?
  description         String?
  department          String?
  accounts            Account[]
  sessions            Session[]
  isPublic            Boolean   @default(true) @map("is_public")
  deleted             DateTime?
  hasSeenV2Onboarding DateTime? @map("has_seen_v2_onboarding")

  created              DateTime               @default(now())
  updated              DateTime               @default(now())
  ownedBases           Base[]
  createdResources     Resource[]
  uploads              Upload[]
  resourceEvent        ResourceEvent[]
  bases                BaseMembers[]
  resources            ResourceContributors[]
  collections          Collection[]
  resourceViews        ResourceView[]
  savedCollections     SavedCollection[]
  sentResourceReports  ResourceReport[]
  baseFollows          BaseFollow[]
  profileFollows       ProfileFollow[]        @relation(name: "profile_follow_follower")
  followedBy           ProfileFollow[]        @relation(name: "profile_follow_followed")
  searches             SearchExecution[]
  feedbacks            Feedback[]
  AssistantChatSession AssistantChatSession[]

  @@map("users")
}

model VerificationToken {
  token      String   @id
  identifier String // Email or other user identifier
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Base {
  id       String @id @default(uuid()) @db.Uuid
  legacyId Int?   @unique @map("legacy_id")
  title    String

  image   Image?  @relation(fields: [imageId], references: [id], name: "image")
  imageId String? @unique @map("image_id") @db.Uuid

  coverImage   Image?  @relation(fields: [coverImageId], references: [id], name: "cover_image")
  coverImageId String? @unique @map("cover_image_id") @db.Uuid

  slug                      String  @unique
  // Slug that can be duplicated, only based on title
  titleDuplicationCheckSlug String  @map("title_duplication_check_slug")
  base                      String?
  description               String?
  excerpt                   String? // Used in cards, 300 first chars from description with html tags stripped
  department                String?
  createdBy                 User    @relation(fields: [createdById], references: [id])
  createdById               String  @map("created_by_id") @db.Uuid
  isPublic                  Boolean @default(false) @map("is_public")


  email         String  @default("contact@contact.fr")
  emailIsPublic Boolean @default(false) @map("email_is_public")
  website       String?
  facebook      String?
  twitter       String?
  linkedin      String?

  created          DateTime          @default(now())
  updated          DateTime          @default(now())
  deleted          DateTime?
  resources        Resource[]
  members          BaseMembers[]
  collections      Collection[]
  savedCollections SavedCollection[]
  followedBy       BaseFollow[]

  embeddingBase   Unsupported("vector(1024)")? @map("embedding_base")

  @@index([createdById])
  @@map("bases")
}

model BaseMembers {
  id       String @id @default(uuid()) @db.Uuid
  // Legacy id is not unique because members come from 2 different v1 tables
  legacyId Int?   @map("legacy_id")

  member   User   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String @map("member_id") @db.Uuid

  base   Base   @relation(fields: [baseId], references: [id], onDelete: Cascade)
  baseId String @map("base_id") @db.Uuid

  isAdmin Boolean @default(false) @map("is_admin")

  added            DateTime  @default(now())
  accepted         DateTime?
  acceptationToken String?   @map("acceptation_token")

  @@unique([memberId, baseId])
  @@index([baseId])
  @@index([memberId])
  @@map("base_members")
}

model ResourceContributors {
  id String @id @default(uuid()) @db.Uuid

  legacyId Int? @unique @map("legacy_id")

  contributor   User   @relation(fields: [contributorId], references: [id], onDelete: Cascade)
  contributorId String @map("contributor_id") @db.Uuid

  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String   @map("resource_id") @db.Uuid

  added DateTime @default(now())

  @@unique([contributorId, resourceId])
  @@index([resourceId])
  @@index([contributorId])
  @@map("resource_contributors")
}

enum Theme {
  DiagnosticDeCompetencesNumeriques            @map("diagnostic_de_competences_numeriques")
  DemarchesEtServicesEnLigne                   @map("demarches_et_services_en_ligne")
  MaitriseDesOutilsNumeriques                  @map("maitrise_des_outils_numeriques")
  NavigationSurInternet                        @map("navigation_sur_internet")
  UsageDuMaterielInformatique                  @map("usage_du_materiel_informatique")
  SobrieteNumerique                            @map("sobriete_numerique")
  MaterielReconditionne                        @map("materiel_reconditionne")
  Mobilites                                    @map("mobilites")
  Accessibilite                                @map("accessibilite")
  ActeursDuNumerique                           @map("acteurs_du_numerique")
  ArtsEtCulture                                @map("arts_et_culture")
  CitoyenneteEtEngagement                      @map("citoyennete_et_engagement")
  CodeEtProgrammation                          @map("code_et_programmation")
  CommunicationEnLigneEtReseauxSociaux         @map("communication_en_ligne_et_reseaux_sociaux")
  Donnees                                      @map("donnees")
  EducationEtFormation                         @map("education_et_formation")
  EmploiEtEntrepreunariat                      @map("emploi_et_entrepreunariat")
  JeuxVideos                                   @map("jeux_videos")
  InclusionNumerique                           @map("inclusion_numerique")
  NumeriqueEnSante                             @map("numerique_en_sante")
  Parentalite                                  @map("parentalite")
  RisquesCyberEtProtection                     @map("risques_cyber_et_protection")
  CommunsNumeriques                            @map("communs_numeriques")
  EconomieNumerique                            @map("economie_numerique")
  GouvernancesPartagees                        @map("gouvernances_partagees")
  IntelligenceArtificielle                     @map("intelligence_artificielle")
  OpenSourceEtLicencesLibres                   @map("open_source_et_licences_libres")
  SouveraineteNumeriqueEtHebergementDesDonnees @map("souverainete_numerique_et_hebergement_des_donnees")
  EcoconceptionDeServicesNumeriques            @map("ecoconception_de_services_numeriques")
  UsagesResponsablesDuNumerique                @map("usages_responsables_du_numerique")
  NumeriqueAuServiceDeLEnvironnement           @map("numerique_au_service_de_l_environnement")
  TerritoiresConnectesEtDurables               @map("territoires_connectes_et_durables")

  @@map("theme")
}

enum SupportType {
  SupportPedagogique @map("support_pedagogique")
  Tutoriel           @map("tutoriel")
  Jeu                @map("jeu")
  Methodologie       @map("methodologie")
  SiteWeb            @map("site_web")
  BoiteOutils        @map("boite_outils")
  Logiciel           @map("logiciel")
  Questionnaire      @map("questionnaire")
  Cartographie       @map("cartographie")
  Annuaire           @map("annuaire")
  ModeleNotice       @map("modele_notice")
  Article            @map("article")
  Infographie        @map("infographie")
  Video              @map("video")

  @@map("support_type")
}

enum TargetAudience {
  TousPublics                          @map("tous_publics")
  MediateursNumeriques                 @map("mediateurs_numeriques")
  TravailleursSociaux                  @map("travailleurs_sociaux")
  AssociationsActeursEss               @map("associations_acteurs_ess")
  Entreprises                          @map("entreprises")
  CollectivitesTerritoriales           @map("collectivites_territoriales")
  AdministrationsEtablissementsPublics @map("administrations_etablissements_publics")
  Elus                                 @map("elus")
  AidantsNumeriques                    @map("aidants_numeriques")
  AutresProfessionnels                 @map("autres_professionnels")
  EnseignantsProfessionnelsFormation   @map("enseignants_professionnels_formation")
  Particuliers                         @map("particuliers")
  JeunesEnfants_6                      @map("jeunes_enfants_6")
  Enfants_6_12                         @map("enfants_6_12")
  Adolescents_12_18                    @map("adolescents_12_18")
  JeunesAdultes_18_25                  @map("jeunes_adultes_18_25")
  Adultes                              @map("adultes")
  Parents                              @map("parents")
  SeniorsPersonnesAgees                @map("seniors_personnes_agees")
  PersonnesTresEloigneesNumerique      @map("personnes_tres_eloignees_numerique")
  PersonnesInsertionProfessionnelle    @map("personnes_insertion_professionnelle")
  PersonnesEnInsertionSociale          @map("personnes_en_insertion_sociale")
  PersonnesPerteAutonomie              @map("personnes_perte_autonomie")
  RefugiesDemandeursAsile              @map("refugies_demandeurs_asile")
  PersonneSituationIlletrisme          @map("personne_situation_illetrisme")
  PersonneAllophone                    @map("personne_allophone")
  PersonneSituationHandicap            @map("personne_situation_handicap")

  @@map("target_audience")
}

model Resource {
  id                        String   @id @default(uuid()) @db.Uuid
  legacyId                  Int?     @unique @map("legacy_id")
  title                     String
  slug                      String   @unique
  // Slug that can be duplicated, only based on title
  titleDuplicationCheckSlug String   @map("title_duplication_check_slug")
  // isPublic is null when the user created the resource but did not publish it
  isPublic                  Boolean? @map("is_public")

  themes          Theme[]
  supportTypes    SupportType[]    @map("support_types")
  targetAudiences TargetAudience[] @map("target_audiences")

  image   Image?  @relation(fields: [imageId], references: [id])
  imageId String? @unique @map("image_id") @db.Uuid

  description String
  excerpt     String // Used in cards, 300 first chars from description

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String @map("created_by_id") @db.Uuid

  published     DateTime? // The first publication date
  lastPublished DateTime? @map("last_published") // The most recent re-publication date
  deleted       DateTime?

  base   Base?   @relation(fields: [baseId], references: [id])
  baseId String? @map("base_id") @db.Uuid

  created      DateTime               @default(now())
  updated      DateTime               @default(now())
  contents     Content[]
  events       ResourceEvent[]
  contributors ResourceContributors[]
  collections  CollectionResource[]
  views        ResourceView[]
  reports      ResourceReport[]

  embedding   Unsupported("vector(1024)")?


  @@index([baseId])
  @@index([createdById])
  @@index(themes, name: "resources_themes_idx", type: Gin)
  @@index(supportTypes, name: "resources_support_type_idx", type: Gin)
  @@index(targetAudiences, name: "resources_target_audiences_idx", type: Gin)
  @@map("resources")
}

enum ResourceEventType {
  Created                   @map("created")
  Migrated                  @map("migrated")
  Republished               @map("republished")
  Published                 @map("published")
  Deleted                   @map("deleted")
  TitleAndDescriptionEdited @map("title_and_description_edited")
  ImageEdited               @map("image_edited")
  BaseChanged               @map("base_changed")
  IndexationChanged         @map("indexation_changed")
  VisibilityChanged         @map("visibility_changed")
  ContentAdded              @map("content_added")
  ContentEdited             @map("content_edited")
  ContentRemoved            @map("content_removed")
  ContentReordered          @map("content_reordered")

  @@map("resource_event_type")
}

model ResourceEvent {
  id   String            @id @default(uuid()) @db.Uuid
  type ResourceEventType
  data Json

  // Used as the ordering for events
  timestamp  DateTime
  // If multiple events have to be dispatched with same timestamp, sequence is used to order them
  sequence   Int      @default(0)
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String   @map("resource_id") @db.Uuid
  by         User?    @relation(fields: [byId], references: [id])
  byId       String?  @map("by_id") @db.Uuid

  @@index([resourceId])
  @@map("resource_events")
}

enum ContentType {
  SectionTitle @map("section_title")
  File         @map("file")
  Image        @map("image")
  Link         @map("link")
  Text         @map("text")

  @@map("content_type")
}

model Content {
  id String @id @default(uuid()) @db.Uuid

  // Legacy content can be imported from content blocks or sections
  legacyContentId        Int? @unique @map("legacy_content_id")
  legacySectionId        Int? @unique @map("legacy_section_id")
  // Legacy content can be a linked resource. It will be transformed to a simple Link content during migration
  legacyLinkedResourceId Int? @map("legacy_linked_resource_id")

  order Int

  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String   @map("resource_id") @db.Uuid

  // Data of this model depend on the type
  type ContentType

  // SectionTitle | File | Image | Link
  title String?

  // File | Image | Link
  caption String?

  // Image
  image        Image?  @relation(fields: [imageId], references: [id])
  imageId      String? @unique @map("image_id") @db.Uuid
  // Image model can have alt text
  // but it is persisted here to allow for content edition events without touching image model
  imageAltText String? @map("image_alt_text")

  // File
  file    Upload? @relation(fields: [fileKey], references: [key])
  fileKey String? @unique @map("file_key")

  // Link
  showPreview     Boolean? @map("show_preview")
  url             String?
  // Link - Preview data (e.g. open graph) fetched from the url for preview
  linkDescription String?
  linkTitle       String?
  linkImageUrl    String?
  linkFaviconUrl  String?

  // Text
  text String?

  created DateTime @default(now())
  updated DateTime @default(now())

  @@index([resourceId])
  @@map("contents")
}

model Image {
  id       String @id @default(uuid()) @db.Uuid
  legacyId Int?   @unique @map("legacy_id")

  altText String? @map("alt_text")

  blurUrl String? @map("blur_url")

  // Original dimensions in pixel (before cropping)
  originalHeight Int? @map("original_heigth")
  originalWidth  Int? @map("original_width")

  // Relative height crop (0-1)
  cropHeight Float @default(1) @map("crop_height")
  // Relative width crop
  cropWidth  Float @default(1) @map("crop_width")
  // Relative top crop
  cropTop    Float @default(0) @map("crop_top")
  // Relative left crop
  cropLeft   Float @default(0) @map("crop_left")

  // Cropped dimensions in pixels
  height Int?
  width  Int?

  upload         Upload      @relation(fields: [uploadKey], references: [key])
  uploadKey      String      @unique @map("upload_key")
  content        Content?
  resource       Resource?
  user           User?
  baseCoverImage Base?       @relation(name: "cover_image")
  base           Base?       @relation(name: "image")
  collection     Collection?

  @@map("images")
}

model Upload {
  key       String  @id
  legacyKey String? @unique @map("legacy_key")
  mimeType  String  @map("mime_type")
  name      String

  // Size in bytes
  size Int?

  // Migrated legacy files do not have an uploaded by user
  uploadedBy   User?   @relation(fields: [uploadedById], references: [id])
  uploadedById String? @map("uploaded_by_id") @db.Uuid

  created DateTime @default(now())

  // Is a file that is used in a fileContent for download
  content Content?

  // Is an image
  image Image?

  @@map("uploads")
}

model CollectionResource {
  id                      String @id @default(uuid()) @db.Uuid
  legacyId                Int?   @unique @map("legacy_id")
  legacyPinnedResourcesId Int?   @unique @map("legacy_pinned_resources_id")

  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String   @map("resource_id") @db.Uuid

  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String     @map("collection_id") @db.Uuid

  added DateTime @default(now())

  @@unique([resourceId, collectionId])
  @@index([resourceId])
  @@index([collectionId])
  @@map("collection_resources")
}

model ResourceView {
  id   String @id @default(uuid()) @db.Uuid
  hash String

  legacyId Int? @unique @map("legacy_id")

  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String   @map("resource_id") @db.Uuid

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id") @db.Uuid

  timestamp DateTime @default(now())

  @@index([hash])
  @@index([userId])
  @@index([resourceId])
  @@map("resource_views")
}

model Collection {
  id                          String @id @default(uuid()) @db.Uuid
  legacyId                    Int?   @unique @map("legacy_id")
  // Legacy free floating "pinned resources" have been migrated into a collection
  legacyPinnedResourcesBaseId Int?   @unique @map("legacy_pinned_resources_base_id")

  slug        String  @unique
  title       String
  description String?
  isPublic    Boolean @default(false) @map("is_public")
  isFavorites Boolean @default(false) @map("is_favorites")

  created DateTime  @default(now())
  updated DateTime  @default(now())
  deleted DateTime?

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String @map("created_by_id") @db.Uuid

  base   Base?   @relation(fields: [baseId], references: [id])
  baseId String? @map("base_id") @db.Uuid

  image   Image?  @relation(fields: [imageId], references: [id])
  imageId String? @unique @map("image_id") @db.Uuid

  resources       CollectionResource[]
  savedCollection SavedCollection[]

  @@index([baseId])
  @@index([createdById])
  @@map("collections")
}

model SavedCollection {
  id       String @id @default(uuid()) @db.Uuid
  legacyId Int?   @unique @map("legacy_id")

  savedBy   User   @relation(fields: [savedById], references: [id])
  savedById String @map("saved_by_id") @db.Uuid

  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String     @map("collection_id") @db.Uuid

  // If saved in a base, we keep the user in savedBy but the info for
  // where to consider it is in baseId
  base   Base?   @relation(fields: [baseId], references: [id])
  baseId String? @map("base_id") @db.Uuid

  saved DateTime @default(now())

  @@index([savedById])
  @@index([collectionId])
  @@index([baseId])
  @@map("saved_collection")
}

enum ResourceReportReason {
  // Le contenu est inapproprié
  Inappropriate @map("inappropriate")
  // Le contenu est obsolète
  Outdated      @map("outdated")
  // Il y a des erreurs
  Errors        @map("errors")
  // C’est le doublon d’une autre ressource
  Duplicate     @map("duplicate")

  @@map("resource_report_reason")
}

// Signalement de ressource
model ResourceReport {
  id String @id @default(uuid()) @db.Uuid

  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String   @map("resource_id") @db.Uuid

  sentBy   User?   @relation(fields: [sentById], references: [id])
  sentById String? @map("sent_by_id") @db.Uuid

  reason ResourceReportReason

  comment String

  created DateTime @default(now())

  @@index([resourceId])
  @@index([sentById])
  @@map("resource_reports")
}

model BaseFollow {
  id       String @id @default(uuid()) @db.Uuid
  legacyId Int?   @unique @map("legacy_id")

  base   Base   @relation(fields: [baseId], references: [id], onDelete: Cascade)
  baseId String @map("base_id") @db.Uuid

  follower   User   @relation(fields: [followerId], references: [id])
  followerId String @map("follower_id") @db.Uuid

  followed DateTime @default(now())

  @@unique([baseId, followerId])
  @@index([baseId])
  @@index([followerId])
  @@map("base_follows")
}

model ProfileFollow {
  id       String @id @default(uuid()) @db.Uuid
  legacyId Int?   @unique @map("legacy_id")

  profile   User   @relation(name: "profile_follow_followed", fields: [profileId], references: [id], onDelete: Cascade)
  profileId String @map("profile_id") @db.Uuid

  follower   User   @relation(name: "profile_follow_follower", fields: [followerId], references: [id])
  followerId String @map("follower_id") @db.Uuid

  followed DateTime @default(now())

  @@unique([profileId, followerId])
  @@index([profileId])
  @@index([followerId])
  @@map("profile_follows")
}

enum SearchType {
  Quicksearch @map("quicksearch")
  Resources   @map("resources")
  Bases       @map("bases")
  Profiles    @map("profiles")

  @@map("search_type")
}

model SearchExecution {
  id String @id @default(uuid()) @db.Uuid

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id") @db.Uuid

  type SearchType

  query String

  timestamp DateTime @default(now())

  duration Int

  results Int

  themes          Theme[]          @default([])
  supportTypes    SupportType[]    @default([]) @map("support_types")
  targetAudiences TargetAudience[] @default([]) @map("target_audiences")
  departments     String[]         @default([])

  page    Int
  perPage Int @map("per_page")

  sorting String

  @@index([userId])
  @@map("search_executions")
}

enum DifficultyArea {
  Search      @map("search")
  Resources   @map("resources")
  Collections @map("collections")
  Profile     @map("profile")
  Bases       @map("bases")
  Other       @map("other")

  @@map("difficulty_area")
}

// Questionnaire de satisfaction
model Feedback {
  id String @id @default(uuid()) @db.Uuid

  sentBy   User?   @relation(fields: [sentById], references: [id])
  sentById String? @map("sent_by_id") @db.Uuid

  // Note de 0 à 10
  rating Int

  hadDifficulty     Boolean         @default(false) @map("had_difficulty")
  difficultyArea    DifficultyArea? @map("difficulty_area")
  difficultyComment String?         @map("difficulty_comment")

  comment String?

  // Email de contact si l’utilisateur souhaite être recontacté
  wantsToBeContacted String? @map("wants_to_be_contacted")

  created DateTime @default(now())

  @@index([sentById])
  @@map("feedback")
}

model AssistantChatSession {
  id          String  @id @default(uuid()) @db.Uuid
  createdBy   User?   @relation(fields: [createdById], references: [id])
  createdById String? @map("created_by_id") @db.Uuid

  context String

  created  DateTime               @default(now())
  updated  DateTime               @default(now())
  messages AssistantChatMessage[]
}

enum AssistantChatRole {
  User      @map("user")
  Assistant @map("assistant")
}

model AssistantChatMessage {
  id        String               @id @default(uuid()) @db.Uuid
  role      AssistantChatRole
  session   AssistantChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String               @map("session_id") @db.Uuid
  content   String
  created   DateTime             @default(now())
}


model DocumentHelp {
  id        String                 @id @default(cuid())
  content   String
  source    String
  vector    Unsupported("vector")?

  @@map("help_center")

}


model JobExecution {
  id String @id @default(uuid()) @db.Uuid

  name String

  started   DateTime
  completed DateTime?
  errored   DateTime?
  duration  Int?
  data      Json?
  result    Json?
  error     String?

  @@map("job_executions")
}
