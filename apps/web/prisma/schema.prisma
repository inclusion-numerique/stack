generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "jsonProtocol"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account, Session, User and VerificationToken
// Match next-auth model https://next-auth.js.org/adapters/prisma
// Underscored names are from there too
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  legacyId      Int?      @unique @map("legacy_id")
  firstName     String?   @map("first_name")
  lastName      String?   @map("last_name")
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         Image?    @relation(fields: [imageId], references: [id])
  imageId       String?   @unique @map("image_id") @db.Uuid
  location      String?
  title         String?
  description   String?
  accounts      Account[]
  sessions      Session[]
  isPublic      Boolean   @default(false) @map("is_public")

  created          DateTime        @default(now())
  updated          DateTime        @default(now())
  ownedBases       Base[]
  createdResources Resource[]
  uploads          Upload[]
  ResourceEvent    ResourceEvent[]

  @@map("users")
}

model VerificationToken {
  token      String   @id
  identifier String // Email or other user identifier
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Base {
  id       String @id @default(uuid()) @db.Uuid
  legacyId Int?   @unique @map("legacy_id")
  title    String

  image   Image?  @relation(fields: [imageId], references: [id])
  imageId String? @unique @map("image_id") @db.Uuid

  slug                      String  @unique
  // Slug that can be duplicated, only based on title
  titleDuplicationCheckSlug String  @map("title_duplication_check_slug")
  description               String?
  owner                     User    @relation(fields: [ownerId], references: [id])
  ownerId                   String  @map("owner_id") @db.Uuid
  isPublic                  Boolean @default(false) @map("is_public")

  created   DateTime   @default(now())
  updated   DateTime   @default(now())
  resources Resource[]

  @@map("bases")
}

model Resource {
  id                        String  @id @default(uuid()) @db.Uuid
  legacyId                  Int?    @unique @map("legacy_id")
  title                     String
  slug                      String  @unique
  // Slug that can be duplicated, only based on title
  titleDuplicationCheckSlug String  @map("title_duplication_check_slug")
  isPublic                  Boolean @default(false) @map("is_public")

  image   Image?  @relation(fields: [imageId], references: [id])
  imageId String? @unique @map("image_id") @db.Uuid

  description String

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String @map("created_by_id") @db.Uuid

  published DateTime?

  base   Base?   @relation(fields: [baseId], references: [id])
  baseId String? @map("base_id") @db.Uuid

  created  DateTime        @default(now())
  updated  DateTime        @default(now())
  contents Content[]
  linkedBy Content[]       @relation(name: "contentLinkedResource")
  events   ResourceEvent[]

  @@map("resources")
}

enum ResourceEventType {
  Created
  Migrated
  Published
  TitleAndDescriptionEdited
  ImageEdited
  BaseChanged
  ContentAdded
  ContentEdited
  ContentRemoved
  ContentReordered
}

model ResourceEvent {
  id   String            @id @default(uuid()) @db.Uuid
  type ResourceEventType
  data Json

  // Used as the ordering for events
  timestamp  DateTime
  // If multiple events have to be dispatched with same timestamp, sequence is used to order them
  sequence   Int      @default(0)
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String   @map("resource_id") @db.Uuid
  by         User?    @relation(fields: [byId], references: [id])
  byId       String?  @map("by_id") @db.Uuid

  @@map("resource_events")
}

enum ContentType {
  SectionTitle
  File
  Image
  Link
  ResourceLink
  Text
}

model Content {
  id String @id @default(uuid()) @db.Uuid

  // Legacy content can be imported from content blocks or sections
  legacyContentId Int? @unique @map("legacy_content_id")
  legacySectionId Int? @unique @map("legacy_section_id")

  order Int

  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String   @map("resource_id") @db.Uuid

  // Data of this model depend on the type
  type ContentType

  // SectionTitle | File | Image | Link
  title String?

  // File | Image | Link
  caption String?

  // Image
  image   Image?  @relation(fields: [imageId], references: [id])
  imageId String? @unique @map("image_id") @db.Uuid

  // File
  file    Upload? @relation(fields: [fileKey], references: [key])
  fileKey String? @unique @map("file_key")

  // Link
  showPreview     Boolean? @map("show_preview")
  url             String?
  // Link - Preview data (e.g. open graph) fetched from the url for preview
  linkDescription String?
  linkTitle       String?
  linkImageUrl    String?

  // ResourceLink
  linkedResource         Resource? @relation(name: "contentLinkedResource", fields: [linkedResourceId], references: [id])
  linkedResourceId       String?   @map("linked_resource_id") @db.Uuid
  legacyLinkedResourceId Int?      @map("legacy_linked_resource_id")

  // Text
  text String?

  created DateTime @default(now())
  updated DateTime @default(now())

  @@map("contents")
}

model Image {
  id       String @id @default(uuid()) @db.Uuid
  legacyId Int?   @unique @map("legacy_id")

  altText String? @map("alt_text")

  blurUrl String? @map("blur_url")

  // Original dimensions in pixel (before cropping)
  originalHeight Int? @map("original_heigth")
  originalWidth  Int? @map("original_width")

  // Relative height crop (0-1)
  cropHeight Float @default(1) @map("crop_height")
  // Relative width crop
  cropWidth  Float @default(1) @map("crop_width")
  // Relative top crop
  cropTop    Float @default(0) @map("crop_top")
  // Relative left crop
  cropLeft   Float @default(0) @map("crop_left")

  // Cropped dimensions in pixels
  height Int?
  width  Int?

  upload    Upload    @relation(fields: [uploadKey], references: [key])
  uploadKey String    @unique @map("upload_key")
  content   Content?
  resource  Resource?
  user      User?
  base      Base?

  @@map("images")
}

model Upload {
  key       String  @id
  legacyKey String? @unique @map("legacy_key")
  mimeType  String  @map("mime_type")
  name      String

  // Size in bytes
  size Int?

  // Migrated legacy files do not have an uploaded by user
  uploadedBy   User?   @relation(fields: [uploadedById], references: [id])
  uploadedById String? @map("uploaded_by_id") @db.Uuid

  created DateTime @default(now())

  // Is a file that is used in a fileContent for download
  content Content?

  // Is an image
  image Image?

  @@map("uploads")
}
