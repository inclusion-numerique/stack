generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "nativeDistinct", "relationJoins"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account, Session, User and VerificationToken
// Match next-auth model https://next-auth.js.org/adapters/prisma
// Underscored names are from there too
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  User    @map("user")
  Support @map("support")
  Admin   @map("admin")

  @@map("user_role")
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  legacyId      Int?      @unique @map("legacy_id")
  firstName     String?   @map("first_name")
  lastName      String?   @map("last_name")
  name          String?
  role          UserRole  @default(User)
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         Image?    @relation(fields: [imageId], references: [id])
  imageId       String?   @unique @map("image_id") @db.Uuid
  location      String?
  title         String?
  description   String?
  accounts      Account[]
  sessions      Session[]

  created   DateTime  @default(now())
  updated   DateTime  @default(now())
  lastLogin DateTime? @map("last_login")

  uploads Upload[]

  @@map("users")
}

model VerificationToken {
  token      String   @id
  identifier String // Email or other user identifier
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Image {
  id       String @id @default(uuid()) @db.Uuid
  legacyId Int?   @unique @map("legacy_id")

  altText String? @map("alt_text")

  blurUrl String? @map("blur_url")

  // Original dimensions in pixel (before cropping)
  originalHeight Int? @map("original_height")
  originalWidth  Int? @map("original_width")

  // Relative height crop (0-1)
  cropHeight Float @default(1) @map("crop_height")
  // Relative width crop
  cropWidth  Float @default(1) @map("crop_width")
  // Relative top crop
  cropTop    Float @default(0) @map("crop_top")
  // Relative left crop
  cropLeft   Float @default(0) @map("crop_left")

  // Cropped dimensions in pixels
  height Int?
  width  Int?

  upload    Upload @relation(fields: [uploadKey], references: [key])
  uploadKey String @unique @map("upload_key")
  user      User?

  @@map("images")
}

model Upload {
  key       String  @id
  legacyKey String? @unique @map("legacy_key")
  mimeType  String  @map("mime_type")
  name      String

  // Size in bytes
  size Int?

  uploadedBy   User?   @relation(fields: [uploadedById], references: [id])
  uploadedById String? @map("uploaded_by_id") @db.Uuid

  created DateTime @default(now())

  // Is an image
  image Image?

  @@map("uploads")
}

model JobExecution {
  id String @id @default(uuid()) @db.Uuid

  name String

  started   DateTime
  completed DateTime?
  errored   DateTime?
  duration  Int?
  data      Json?
  result    Json?
  error     String?

  @@map("job_executions")
}
