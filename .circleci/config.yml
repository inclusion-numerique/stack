version: 2.1

orbs:
  skip: theodo/skip@0.1.2
  queue: eddiewebb/queue@1.8.4
executors:
  node:
    docker:
      - image: cimg/node:18.15.0
        environment:
          TZ: 'UTC'

  node-postgres:
    docker:
      - image: cimg/node:18.15.0
        environment:
          TZ: 'UTC'
          CI_DATABASE_URL: postgresql://postgres@localhost/test
      - image: cimg/postgres:14.0
        environment:
          POSTGRES_USER: postgres
  node-browsers:
    docker:
      - image: cimg/node:18.15.0-browsers
        environment:
          TZ: 'UTC'
  node-e2e:
    docker:
      - image: cimg/node:18.15.0-browsers
        environment:
          TZ: 'UTC'
          CI_DATABASE_URL: postgresql://postgres@localhost/test
      - image: maildev/maildev:latest
        environment:
          MAILDEV_INCOMING_USER: mailuser
          MAILDEV_INCOMING_PASS: mailpassword
#        ports:
#          - "1080:1080"
#          - "1025:1025"
      - image: cimg/postgres:14.0
        environment:
          POSTGRES_USER: postgres

parameters:
  cache_version:
    type: string
    default: '2023-04-21-02'
  virtual_store_dir:
    type: string
    default: './.pnpm'
  lockfile:
    type: string
    default: './pnpm-lock.yaml'
  image:
    type: string
    default: stack-web-<< pipeline.git.branch >> | sed -e 's/\//-/g'
  deploy_version:
    type: string
    default: latest
  e2e_version:
    type: string
    default: e2e
  trigger_workflow:
    type: string
    # Can be one of the following:
    ## web_app_deployment
    ## web_app_preview_deletion
    ## project_stack_deployment
    default: "web_app_deployment"
  # Name of the environment to scrap
  preview_deletion_branch:
    type: string
    default: ""

workflows:
  version: 2
  web_app_deployment:
    when:
      equal: [ web_app_deployment, << pipeline.parameters.trigger_workflow >> ]
    jobs:
      - prepare_workspace_dependencies
      - prepare_web_prod_dependencies
      - lint:
          requires:
            - prepare_workspace_dependencies
      - test_packages:
          requires:
            - prepare_workspace_dependencies
      - test_web:
          requires:
            - prepare_workspace_dependencies
      - build_web:
          requires:
            - prepare_workspace_dependencies
            - prepare_web_prod_dependencies

      - test_web_components:
          requires:
            - prepare_workspace_dependencies

      - test_ui_components:
          requires:
            - prepare_workspace_dependencies

      - test_web_e2e:
          requires:
            - build_web

      - deploy_web:
          requires:
            - lint
            - test_packages
            - test_web
            - test_web_components
            - test_ui_components
            - test_web_e2e

      - chromatic:
          requires:
            - deploy_web

  project_infrastructure_deployment:
    when:
      equal: [ project_stack_deployment, << pipeline.parameters.trigger_workflow >> ]
    jobs:
      - prepare_workspace_dependencies
      - lint_and_test_cdk_package:
          requires:
            - prepare_workspace_dependencies
      - compute_project_infrastructure_diff:
          requires:
            - prepare_workspace_dependencies
      - approve_infra_deployment:
          type: approval
          requires:
            - lint_and_test_cdk_package
            - compute_project_infrastructure_diff
      - project_infrastructure_deployment:
          requires:
            - approve_infra_deployment

  web_app_preview_deletion:
    # This workflow exclusively runs on the dev branch, with target env to destroy as parameter
    # It should never run with main as a parameter
    when:
      and:
        - not:
            equal: [ main, << pipeline.git.branch >> ]
        - not:
            equal: [ main, << pipeline.parameters.preview_deletion_branch >>]
        - << pipeline.parameters.preview_deletion_branch >>
        - equal: [ web_app_preview_deletion, << pipeline.parameters.trigger_workflow >> ]
    jobs:
      - prepare_workspace_dependencies
      - web_app_preview_deletion:
          requires:
            - prepare_workspace_dependencies

jobs:
  prepare_workspace_dependencies:
    executor: node
    resource_class: large
    steps:
      - checkout
      - skip/skip_unchanged:
          paths: pnpm-lock.yaml
      - install_dependencies
      - run:
          name: 'Fetch dependencies'
          command: pnpm install --virtual-store-dir << pipeline.parameters.virtual_store_dir >> --frozen-lockfile
      - run:
          name: 'Monorepo manypkg check'
          command: pnpm manypkg check
      - save_cache:
          key: << pipeline.parameters.cache_version >>-pnpm-{{ checksum "<< pipeline.parameters.lockfile >>" }}
          paths:
            - << pipeline.parameters.virtual_store_dir >>
            - ./node_modules
            - ./apps/web/node_modules
            - ./apps/cli/node_modules
            - ./packages/cdk/node_modules
            - ./packages/config/node_modules
            - ./packages/emails/node_modules
            - ./packages/lint/node_modules
            - ./packages/storybook/node_modules
            - ./packages/test/node_modules
            - ./packages/ui/node_modules
            - ./packages/fixtures/node_modules
      - save_cache:
          key: << pipeline.parameters.cache_version >>-cypress-{{ checksum "<< pipeline.parameters.lockfile >>" }}
          paths:
            - /home/circleci/.cache/Cypress

  prepare_web_prod_dependencies:
    executor: node
    resource_class: large
    steps:
      - checkout
      - skip/skip_unchanged:
          paths: pnpm-lock.yaml
      - install_pnpm
      - run:
          name: 'Install dependencies'
          command: |
            pnpm install -F @app/web --prod --frozen-lockfile
      - run:
          name: 'Monorepo manypkg check'
          command: pnpm manypkg check
      - save_cache:
          key: << pipeline.parameters.cache_version >>-web-prod-{{ checksum "<< pipeline.parameters.lockfile >>" }}
          paths:
            - ./node_modules
            - ./apps/web/node_modules

  lint:
    executor: node
    resource_class: large
    steps:
      - checkout
      - install_dependencies
      - run:
          name: 'Prisma generate'
          command: pnpm --silent -F @app/web prisma generate
      - run:
          name: 'Tsc'
          command: pnpm tsc
      - run:
          name: 'Lint'
          command: pnpm lint
          no_output_timeout: 30m

  lint_and_test_cdk_package:
    executor: node
    resource_class: large
    steps:
      - checkout
      - install_dependencies
      - run:
          name: 'Tsc config and cdk packages'
          command: pnpm -F @app/config -F @app/cdk tsc
      - run:
          name: 'Lint config and cdk packages'
          command: pnpm -F @app/config -F @app/cdk lint
      - run:
          name: 'Test config and cdk packages'
          command: pnpm -F @app/config -F @app/cdk test

  test_packages:
    executor: node
    resource_class: large
    steps:
      - checkout
      - install_dependencies
      - create_dotenv_file
      - run:
          name: 'Test all packages except @app/web'
          command: pnpm --silent -F '!@app/web' test

  test_web:
    executor: node
    resource_class: large
    steps:
      - checkout
      - install_dependencies
      - create_dotenv_file
      - run:
          name: 'Test @app/web'
          command: pnpm --silent -F @app/web test

  build_web:
    executor: node-postgres
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - install_dependencies
      - create_dotenv_file
      - run:
          name: 'Prisma generate'
          command: pnpm --silent -F @app/web prisma generate
      - add_secrets_to_dotenv_file
      - add_dotenv_vars_to_bash_env
      - setup_docker_web_env
      - setup_next_public_env
      - run:
          name: 'Install DSFR'
          command: pnpm --silent -F @app/web setup:dsfr
      - run:
          name: 'Create CI database schema'
          command: |
            DATABASE_URL=$CI_DATABASE_URL pnpm --silent -F @app/web prisma db push --skip-generate --accept-data-loss
      - restore_cache:
          keys:
            - << pipeline.parameters.cache_version >>-next-{{ checksum "<< pipeline.parameters.lockfile >>" }}
      - run:
          name: 'Build next app'
          command: DATABASE_URL=$CI_DATABASE_URL pnpm --silent -F @app/web build
      - save_cache:
          key: << pipeline.parameters.cache_version >>-next-{{ checksum "<< pipeline.parameters.lockfile >>" }}
          paths:
            - ./apps/web/.next/cache
      - run:
          name: 'Clear dependencies to install only prod dependencies'
          command: |
            rm -rf node_modules
            rm -rf apps/web/node_modules
      - restore_cache:
          keys:
            - << pipeline.parameters.cache_version >>-web-prod-{{ checksum "<< pipeline.parameters.lockfile >>" }}
      - run:
          name: 'Re-generate Prisma after cleaning dependencies'
          command: pnpm --silent -F @app/web prisma generate
      - run:
          name: 'Cleanup build'
          command: |
            # standalone not needed for plain build
            rm -rf apps/web/.next/standalone
      - run:
          name: 'Build docker image'
          command: DOCKER_BUILDKIT=1 docker build --progress=plain -t $IMAGE_BUILD_TAG -f docker/web/Dockerfile .
      - run:
          name: 'Login to registry and push image'
          command: |
            docker login $WEB_APP_DOCKER_REGISTRY -u nologin --password-stdin \<<< "$CI_SCW_SECRET_KEY"
            docker push $IMAGE_BUILD_TAG
      - save_cache:
          key: << pipeline.id >>-web-build
          paths:
            - ./apps/web/.next
            - ./apps/web/public

  chromatic:
    executor: node
    resource_class: large
    steps:
      - checkout
      - install_dependencies
      - create_dotenv_file
      - run:
          name: 'Prisma generate'
          command: pnpm --silent -F @app/web prisma generate
      - add_secrets_to_dotenv_file
      - run:
          name: 'Setup DSFR'
          command: pnpm --silent -F @app/web setup:dsfr
      - run:
          name: 'Build storybook and deploy on chromatic'
          command: pnpm --silent -F @app/storybook chromatic

  test_web_components:
    executor: node-browsers
    resource_class: large
    parallelism: 1
    steps:
      - checkout
      - install_pnpm
      - install_dependencies
      - restore_cache:
          keys:
            - << pipeline.parameters.cache_version >>-cypress-{{ checksum "<< pipeline.parameters.lockfile >>" }}
      - create_dotenv_file
      - run:
          name: 'Prisma generate'
          command: pnpm --silent -F @app/web prisma generate
      - add_secrets_to_dotenv_file
      - add_dotenv_vars_to_bash_env
      - run:
          name: 'Install DSFR'
          command: pnpm --silent -F @app/web setup:dsfr
      - run:
          name: 'Run Cypress component testing'
          command: pnpm --silent -F @app/web cy run --component --record --parallel --group web/components

  test_ui_components:
    executor: node-browsers
    resource_class: large
    parallelism: 2
    steps:
      - checkout
      - install_pnpm
      - install_dependencies
      - restore_cache:
          keys:
            - << pipeline.parameters.cache_version >>-cypress-{{ checksum "<< pipeline.parameters.lockfile >>" }}
      - create_dotenv_file
      - add_secrets_to_dotenv_file
      - add_dotenv_vars_to_bash_env
      - run:
          name: 'Install DSFR'
          command: pnpm --silent -F @app/ui setup:dsfr
      - run:
          name: 'Run Cypress component testing'
          command: pnpm --silent -F @app/ui cy run --component --record --parallel --group ui/components

  test_web_e2e:
    executor: node-e2e
    resource_class: large
    parallelism: 1
    steps:
      - checkout
      - install_pnpm
      - install_dependencies
      - restore_cache:
          keys:
            - << pipeline.parameters.cache_version >>-cypress-{{ checksum "<< pipeline.parameters.lockfile >>" }}
      - create_dotenv_file
      - run:
          name: 'Prisma generate'
          command: pnpm --silent -F @app/web prisma generate
      - add_secrets_to_dotenv_file
      - run:
          name: 'Add e2e vars to .env'
          command: |
            echo "DATABASE_URL=$CI_DATABASE_URL" >> .env
            echo "SMTP_SERVER=localhost" >> .env
            echo "SMTP_PORT=1025" >> .env
            echo "SMTP_USERNAME=mailuser" >> .env
            echo "SMTP_PASSWORD=mailpassword" >> .env
            echo "SMTP_SERVER=localhost" >> .env
            echo 'NEXT_PUBLIC_INCLUSION_CONNECT_ISSUER=$INCLUSION_CONNECT_LOCAL_ISSUER' >> .env
            echo 'NEXT_PUBLIC_INCLUSION_CONNECT_CLIENT_ID=$INCLUSION_CONNECT_LOCAL_CLIENT_ID' >> .env
            echo 'INCLUSION_CONNECT_CLIENT_SECRET=$INCLUSION_CONNECT_LOCAL_CLIENT_SECRET' >> .env
      - run:
          name: 'Create CI database schema'
          command: |
            pnpm --silent -F @app/web prisma db push --skip-generate --accept-data-loss
      - restore_cache:
          key: << pipeline.id >>-web-build
      - run:
          name: Running next server
          background: true
          command: |
            pnpm --silent -F @app/web with-env next start
      - run:
          name: 'Run cypress e2e tests'
          command: |
            pnpm --silent -F @app/web cy run --record --parallel --group web/e2e

  deploy_web:
    executor: node
    resource_class: large
    steps:
      - checkout
      - create_dotenv_file
      - install_dependencies
      - run:
          name: 'Prisma generate'
          command: pnpm --silent -F @app/web prisma generate
      - add_secrets_to_dotenv_file
      - add_dotenv_vars_to_bash_env
      - setup_docker_web_env
      - run:
          name: 'Setup and export database password'
          command: |
            pnpm --silent cli secrets:database:setup $NAMESPACE
            echo "export DATABASE_PASSWORD=$(pnpm --silent cli secrets:database-password $NAMESPACE)" >> ${BASH_ENV}
      - run:
          name: "Create terraform variables file from environment variables"
          command: |
            pnpm --silent cli terraform:vars-from-env web
      - install_terraform
      - run:
          name: 'Generate Prisma client for this platform'
          command: |
            pnpm --silent -F @app/web prisma generate
      - queue/until_front_of_line:
          time: '3'
      - run:
          name: Create Pending Deployment
          command: |
            output="$(pnpm --silent cli github:deployment:create << pipeline.git.branch >>)"
            if [[ $? -ne 0 ]]; then echo "$output"; exit 1; else echo "export DEPLOYMENT_ID=$output" >> ${BASH_ENV}; fi
            echo "Created deployment $DEPLOYMENT_ID"
      - run:
          name: Set deployment status to in progress
          command: pnpm --silent cli github:deployment:update $DEPLOYMENT_ID in_progress 'Terraform stack deployment'
      - run:
          name: 'Deploy web app stack'
          command: |
            pnpm --silent -F @app/cdk cdktf deploy web --var-file .tfvars.json --auto-approve --outputs-file=cdk.out.json --outputs-file-include-sensitive-outputs
      - run:
          name: 'Create .env file from deployment outputs'
          command: |
            pnpm --silent cli dotenv:from-cdk web
      - add_dotenv_vars_to_bash_env
      - run:
          name: Set deployment status to migration
          command: pnpm --silent cli github:deployment:update $DEPLOYMENT_ID in_progress -d 'Executing database migrations' -l https://app.circleci.com/pipelines/workflows/$CIRCLE_WORKFLOW_ID
      - run:
          name: 'Migrate database'
          command: |
            pnpm --silent -F @app/web prisma db push --skip-generate --accept-data-loss
      - run:
          name: Set deployment status to data loading
          command: pnpm --silent cli github:deployment:update $DEPLOYMENT_ID in_progress -d 'Loading data' -l https://app.circleci.com/pipelines/workflows/$CIRCLE_WORKFLOW_ID
      - run:
          name: Check that deployed container status is ok
          command: |
            pnpm --silent cli deployment:check-status https://$WEB_BASE_URL
      - run:
          name: Set deployment status to success
          command: pnpm --silent cli github:deployment:update $DEPLOYMENT_ID success -d 'Deploy successful' -u https://$WEB_BASE_URL -l https://app.circleci.com/pipelines/workflows/$CIRCLE_WORKFLOW_ID
      - run:
          name: Set deployment status to failed
          command: pnpm --silent cli github:deployment:update $DEPLOYMENT_ID failure -d 'Deploy failed' -l https://app.circleci.com/pipelines/workflows/$CIRCLE_WORKFLOW_ID
          when: on_fail

  compute_project_infrastructure_diff:
    executor: node
    resource_class: large
    steps:
      - checkout
      - install_dependencies
      - install_terraform
      - create_dotenv_file
      - run:
          name: 'Prisma generate'
          command: pnpm --silent -F @app/web prisma generate
      - add_secrets_to_dotenv_file
      - run:
          name: "Create terraform variables file from environment variables"
          command: |
            pnpm --silent cli terraform:vars-from-env project
      - run:
          name: 'Compute diff'
          command: |
            pnpm --silent -F @app/cdk cdktf diff project --var-file .tfvars.json
            

  project_infrastructure_deployment:
    executor: node
    resource_class: large
    steps:
      - checkout
      - install_dependencies
      - install_terraform
      - create_dotenv_file
      - run:
          name: 'Prisma generate'
          command: pnpm --silent -F @app/web prisma generate
      - add_secrets_to_dotenv_file
      - run:
          name: "Create terraform variables file from environment variables"
          command: |
            pnpm --silent cli terraform:vars-from-env project
      - run:
          name: 'Deploy project infrastructure stack'
          command: |
            pnpm --silent -F @app/cdk cdktf deploy project --var-file .tfvars.json --auto-approve --outputs-file=cdk.out.json --outputs-file-include-sensitive-outputs

  web_app_preview_deletion:
    executor: node
    resource_class: large
    steps:
      - checkout
      - install_dependencies
      - install_terraform
      - create_dotenv_file
      - run:
          name: 'Prisma generate'
          command: pnpm --silent -F @app/web prisma generate
      - add_secrets_to_dotenv_file
      - run:
          name: "Create terraform variables file from environment variables"
          command: |
            DATABASE_PASSWORD='placeholder_for_destroy' WEB_CONTAINER_IMAGE='placeholder_for_destroy' pnpm --silent cli terraform:vars-from-env web
      - when:
          condition:
            or:
              - not: << pipeline.parameters.preview_deletion_branch >>
              - equal: [ main, << pipeline.parameters.preview_deletion_branch >> ]
              - equal: [ dev, << pipeline.parameters.preview_deletion_branch >> ]
          steps:
            - run:
                name: 'Canceling job, invalid configuration << pipeline.parameters.preview_deletion_branch >>'
                command: |
                  echo "No preview_deletion_branch specified, or invalid one. Canceling job"
                  exit 1
      - run:
          name: 'Destroy stack'
          command: |
            CDK_FORCE_BRANCH='<< pipeline.parameters.preview_deletion_branch >>' pnpm --silent -F @app/cdk cdktf destroy web --auto-approve --var-file .tfvars.json
      - run:
          name: Deactivate Github deployments
          command: pnpm --silent cli github:deployment:deactivate << pipeline.parameters.preview_deletion_branch >>

commands:
  install_pnpm:
    steps:
      - run:
          name: 'Install pnpm'
          command: sudo corepack enable && corepack prepare pnpm@latest --activate

  install_terraform:
    steps:
      - run:
          name: 'Install Terraform'
          command: |
            wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt update && sudo apt install terraform

  install_dependencies:
    steps:
      - install_pnpm
      - restore_cache:
          keys:
            - << pipeline.parameters.cache_version >>-pnpm-{{ checksum "<< pipeline.parameters.lockfile >>" }}

  create_dotenv_file:
    steps:
      - run:
          name: "Create .env file from .env.dist"
          command: |
            cp .env.dist .env

  add_secrets_to_dotenv_file:
    steps:
      - run:
          name: "Add secrets to .env"
          command: |
            SCW_ACCESS_KEY=$CI_SCW_ACCESS_KEY SCW_SECRET_KEY=$CI_SCW_SECRET_KEY pnpm --silent cli dotenv:from-secrets

  setup_next_public_env:
    steps:
      - run:
          name: "Add NEXT_PUBLIC_* env to .env"
          command: |
            pnpm --silent cli dotenv:add-next-public $NAMESPACE

  add_dotenv_vars_to_bash_env:
    steps:
      - run:
          name: 'Add .env vars to bash env'
          command: |
            grep -v -e '^[[:space:]]*$' -e '^#' .env | awk '{print "export " $0}' >> $BASH_ENV

  setup_docker_web_env:
    steps:
      - run:
          name: "Set docker env vars"
          command: |
            echo "export WEB_APP_DOCKER_REGISTRY='$WEB_APP_DOCKER_REGISTRY'" >> ${BASH_ENV}
            echo "export BRANCH='<< pipeline.git.branch >>'" >> ${BASH_ENV}
            echo "export NAMESPACE=$(echo '<< pipeline.git.branch >>' | sed -e 's/\//-/g')" >> ${BASH_ENV}
            echo "export IMAGE_NAME=$(echo 'stack-web-<< pipeline.git.branch >>' | sed -e 's/\//-/g')" >> ${BASH_ENV}
            echo "export IMAGE_BUILD_TAG=$(echo '$WEB_APP_DOCKER_REGISTRY/$IMAGE_NAME:<< pipeline.number >>')" >> ${BASH_ENV}
            echo "export IMAGE_DEPLOY_TAG=$(echo '$WEB_APP_DOCKER_REGISTRY/$IMAGE_NAME:<< pipeline.parameters.deploy_version >>')" >> ${BASH_ENV}
            echo "export IMAGE_E2E_TAG=$(echo '$WEB_APP_DOCKER_REGISTRY/$IMAGE_NAME:<< pipeline.parameters.e2e_version >>')" >> ${BASH_ENV}
            echo "export WEB_CONTAINER_IMAGE=$(echo '$WEB_APP_DOCKER_REGISTRY/$IMAGE_NAME:<< pipeline.number >>')" >> ${BASH_ENV}

